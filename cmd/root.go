package cmd

import (
	"github.com/spf13/cobra"
	"os"
)

var rootCmd = &cobra.Command{
	Use:   "api",
	Short: "Start a REST Api",
	Long: `A RESTful Api example written in golang.

Api written using Onion/Clean Architecture, providing a CLI and docker image.
Project structure:

	- main.go       :: entrypoint
	- cmd/          :: cli commands
	- config/       :: configuration loader (ENV, .env, app.json, cli arguments)
	- server/       :: [fiber/gin/etc] http server
	  + middleware/ :: auth, swagger, errors, cors, cache, crsf, logger, limiter, timeout
	  + route/      :: http endpoints (GET /product, etc)
	  + handlers/   :: facade to the app controllers
	  + docs/       :: autogenerated swagger docs
	- app
	  + controller/ :: framework independent controller
	  + service/    :: application use cases
	  + repository/ :: repository pattern implementation
	  + model/      :: application domain models
	  + dto/        :: use case dtos (create, update, get)
	  + mapper/     :: model-schema-dto mappers
	- database/     ::
	  + schema/     :: database schema
	  + query/      :: SQL/noSQL queries
	  + migration/  :: migration scripts

Cobra is a CLI library for Go that empowers applications.`,
	// Uncomment the following line if your bare application
	// has an action associated with it:
	// Run: func(cmd *cobra.Command, args []string) { },
}

// Execute adds all child commands to the root command and sets flags appropriately.
// This is called by main.main(). It only needs to happen once to the rootCmd.
func Execute() {
	err := rootCmd.Execute()
	if err != nil {
		os.Exit(1)
	}
}

func init() {
	// Here you will define your flags and configuration settings.
	// Cobra supports persistent flags, which, if defined here,
	// will be global for your application.

	// rootCmd.PersistentFlags().StringVar(&cfgFile, "config", "", "config file (default is $HOME/.pkg.yaml)")

	// Cobra also supports local flags, which will only run
	// when this action is called directly.
	rootCmd.Flags().BoolP("toggle", "t", false, "Help message for toggle")
}
